// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Drawer should renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Drawer
    className="mock-classname"
    height="300px"
    isMaskClosable={true}
    isShowCloseIcon={true}
    isShowMask={false}
    isVisible={true}
    onClose={[Function]}
    placement="right"
    style={
      Object {
        "color": "#f00b00",
      }
    }
    title="mock-title"
    width="300px"
  >
    drawer-content
  </Drawer>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": "drawer-content",
      "className": "ljit-drawer mock-classname",
      "closable": true,
      "height": "300px",
      "mask": false,
      "maskClosable": true,
      "onClose": [Function],
      "placement": "right",
      "style": Object {
        "color": "#f00b00",
      },
      "title": "mock-title",
      "visible": true,
      "width": "300px",
    },
    "ref": null,
    "rendered": "drawer-content",
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": "drawer-content",
        "className": "ljit-drawer mock-classname",
        "closable": true,
        "height": "300px",
        "mask": false,
        "maskClosable": true,
        "onClose": [Function],
        "placement": "right",
        "style": Object {
          "color": "#f00b00",
        },
        "title": "mock-title",
        "visible": true,
        "width": "300px",
      },
      "ref": null,
      "rendered": "drawer-content",
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
