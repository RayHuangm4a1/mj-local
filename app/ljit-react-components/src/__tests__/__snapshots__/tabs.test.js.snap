// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tabs should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Tabs
    activeKey="contnet1"
    className="mock-class"
    hasTabInkBar={true}
    isAnimated={true}
    isTabBordered={true}
    isTabFillWidth={false}
    onChange={[Function]}
    tabPosition="top"
    tabType="line"
  >
    mock-children
  </Tabs>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeKey": "contnet1",
      "animated": true,
      "children": "mock-children",
      "className": "ljit-tabs ljit-tabs--position-top ljit-tabs--type-line ljit-tabs--bordered ljit-tabs--inkbar mock-class",
      "hideAdd": false,
      "onChange": [Function],
      "renderTabBar": [Function],
      "tabBarExtraContent": undefined,
      "tabPosition": "top",
      "type": "line",
    },
    "ref": null,
    "rendered": "mock-children",
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeKey": "contnet1",
        "animated": true,
        "children": "mock-children",
        "className": "ljit-tabs ljit-tabs--position-top ljit-tabs--type-line ljit-tabs--bordered ljit-tabs--inkbar mock-class",
        "hideAdd": false,
        "onChange": [Function],
        "renderTabBar": [Function],
        "tabBarExtraContent": undefined,
        "tabPosition": "top",
        "type": "line",
      },
      "ref": null,
      "rendered": "mock-children",
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
