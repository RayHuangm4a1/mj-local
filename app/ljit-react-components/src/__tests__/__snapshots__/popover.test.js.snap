// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popover should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popover
    className="mock-className"
    content="mock-content"
    overlayClassName="mock-overlayClassName"
    placement="top"
    title="mock-title"
    trigger="hover"
  >
    Hover me
  </Popover>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": "Hover me",
      "className": "ljit-popover mock-className",
      "content": "mock-content",
      "mouseEnterDelay": 0.1,
      "mouseLeaveDelay": 0.1,
      "overlayClassName": "ljit-popover-overlay mock-overlayClassName",
      "overlayStyle": Object {},
      "placement": "top",
      "title": "mock-title",
      "transitionName": "zoom-big",
      "trigger": "hover",
    },
    "ref": null,
    "rendered": "Hover me",
    "type": [MockFunction],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "Hover me",
        "className": "ljit-popover mock-className",
        "content": "mock-content",
        "mouseEnterDelay": 0.1,
        "mouseLeaveDelay": 0.1,
        "overlayClassName": "ljit-popover-overlay mock-overlayClassName",
        "overlayStyle": Object {},
        "placement": "top",
        "title": "mock-title",
        "transitionName": "zoom-big",
        "trigger": "hover",
      },
      "ref": null,
      "rendered": "Hover me",
      "type": [MockFunction],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
