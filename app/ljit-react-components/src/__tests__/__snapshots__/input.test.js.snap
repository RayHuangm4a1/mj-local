// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input should renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input
    disabled={false}
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
    onPressEnter={[Function]}
    placeholder="mock-placeholder"
    readOnly={false}
    type="text"
    value="mock-value"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "className": "ljit-input",
      "disabled": false,
      "id": undefined,
      "onBlur": [Function],
      "onChange": [Function],
      "onFocus": [Function],
      "onPressEnter": [Function],
      "placeholder": "mock-placeholder",
      "prefix": undefined,
      "readOnly": false,
      "style": undefined,
      "suffix": undefined,
      "type": "text",
      "value": "mock-value",
    },
    "ref": null,
    "rendered": null,
    "type": [MockFunction],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "className": "ljit-input",
        "disabled": false,
        "id": undefined,
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "onPressEnter": [Function],
        "placeholder": "mock-placeholder",
        "prefix": undefined,
        "readOnly": false,
        "style": undefined,
        "suffix": undefined,
        "type": "text",
        "value": "mock-value",
      },
      "ref": null,
      "rendered": null,
      "type": [MockFunction],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
