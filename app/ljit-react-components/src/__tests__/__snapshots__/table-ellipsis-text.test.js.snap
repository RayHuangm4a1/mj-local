// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`table-ellipsis-text should renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TableEllipsisText
    className="mock-classname"
    positionToRight={10}
    positionToTop={10}
    text="mock-text"
    tooltipPosition="right"
    tooltipWidth={200}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="ljit-table-ellipsis-text__text"
        >
          mock-text
        </div>,
        <span
          className="ljit-table-ellipsis-text__tooltips ljit-table-ellipsis-text__tooltips--right"
          style={
            Object {
              "right": "10px",
              "top": "10px",
              "width": "200px",
            }
          }
        >
          mock-text
        </span>,
      ],
      "className": "ljit-table-ellipsis-text mock-classname",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "mock-text",
          "className": "ljit-table-ellipsis-text__text",
        },
        "ref": null,
        "rendered": "mock-text",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "mock-text",
          "className": "ljit-table-ellipsis-text__tooltips ljit-table-ellipsis-text__tooltips--right",
          "style": Object {
            "right": "10px",
            "top": "10px",
            "width": "200px",
          },
        },
        "ref": null,
        "rendered": "mock-text",
        "type": "span",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="ljit-table-ellipsis-text__text"
          >
            mock-text
          </div>,
          <span
            className="ljit-table-ellipsis-text__tooltips ljit-table-ellipsis-text__tooltips--right"
            style={
              Object {
                "right": "10px",
                "top": "10px",
                "width": "200px",
              }
            }
          >
            mock-text
          </span>,
        ],
        "className": "ljit-table-ellipsis-text mock-classname",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "mock-text",
            "className": "ljit-table-ellipsis-text__text",
          },
          "ref": null,
          "rendered": "mock-text",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "mock-text",
            "className": "ljit-table-ellipsis-text__tooltips ljit-table-ellipsis-text__tooltips--right",
            "style": Object {
              "right": "10px",
              "top": "10px",
              "width": "200px",
            },
          },
          "ref": null,
          "rendered": "mock-text",
          "type": "span",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
