// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ControlledTooltip should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ControlledTooltip
    className="mock-class"
    isVisible={true}
    onVisibleChange={[Function]}
    title="mock-title"
  >
    <div>
      Hover ME
    </div>
  </ControlledTooltip>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div>
        Hover ME
      </div>,
      "className": "ljit-controlled-tooltip mock-class",
      "isArrowPointAtCenter": false,
      "onVisibleChange": [Function],
      "placement": "top",
      "title": "mock-title",
      "trigger": "hover",
      "visible": true,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "Hover ME",
      },
      "ref": null,
      "rendered": "Hover ME",
      "type": "div",
    },
    "type": [MockFunction],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div>
          Hover ME
        </div>,
        "className": "ljit-controlled-tooltip mock-class",
        "isArrowPointAtCenter": false,
        "onVisibleChange": [Function],
        "placement": "top",
        "title": "mock-title",
        "trigger": "hover",
        "visible": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Hover ME",
        },
        "ref": null,
        "rendered": "Hover ME",
        "type": "div",
      },
      "type": [MockFunction],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
